Badger::Class
-------------

* Have DEBUG generate constant DEBUG subroutine fixed to value of flag
  (or pre-defined $DEBUG variable if possible).  Unlike $DEBUG which is 
  evaluated at runtime and thus, is dynamic, the DEBUG constant subroutine
  would be statically resolved at compile time.  Slightly different usage,
  but worthwhile.
  
* finish cleanup and documentation

* pkg() alias for name()

* AUTOLOAD method to delegate to real class if possible?

* fix up id() / base_id() to do something better


Badger::Codec
--------------

* encoded()/decoded() methods (e.g. for utf8)
* codec path should include BadgerX::Codec


Badger::Debug
-------------

* See if we can make this a low-level mixin that we can import into 
  Badger::Utils et al.

Badger::Config
--------------

* Just a basic implementation at moment.  Merge in TT3 config, AppConfig
  and other stuff.


Badger::Docs
------------

* Finish writing it so we can build the web site.


Badger::Exception
-----------------

* needs good cleanup


Badger::Filesystem
------------------

* finish documentation - move VFS docs out of B::FS into B::FS::Virtual

* directory files/directories/dirs as grep across children

* virtual filesystems composed across several real filesystems

* need to handle encoding better in read_file() and write_file() methods.

* read-only filesystem option

* write_file() should have an option for writing to a temporary file and
  renaming into place to avoid race conditions.


Badger::Storage
---------------

* This is available in subversion but not yet included in the released
  distribution.

* unify parameter parsing and identity definition between filesystem and
  database storage modules.

* get/put which take data / return id

* fetch/store which returns 

* create/destroy   connect/disconnect  open/close


Badger::Test
------------

* Could do with some proper testing.  Although all the other test scripts
  do tend to thrash it quite well...


Badger::Utils
-------------

* make methods exportable subroutines

* maybe_load_module can be done using try() (although that requires us to
  call a class method.

* look into merging load_module() with Badger::Class::_autoload


Longer Terms Goals / Larger Projects
------------------------------------

* incorporate re-write of AppConfig into Badger::Config

* consider doing the same with Pod::POM into Badger::Pod and combining
  with Badger::Docs.

* Finish cleaning Badger-Web and release

* Finish refactoring Badger-Database and release


