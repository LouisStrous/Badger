#========================================================================
#
# Badger::Pod
#
# DESCRIPTION
#   Badger sub-system for working with Plain Old Documentation (Pod).
#
# AUTHOR
#   Andy Wardley   <abw@wardley.org>
#
#========================================================================

package Badger::Pod;

use Badger::Class
    version    => 0.01,
    debug      => 1,
    base       => 'Badger::Base Badger::Exporter',
    import     => 'class',
    constant   => {
        POD          => 'Badger::Pod',
        DOCUMENT     => 'Badger::Pod::Document',
        NODES        => 'Badger::Pod::Nodes',
        VIEWS        => 'Badger::Pod::Views',
        PARSER       => 'Badger::Pod::Parser',
        MODEL_PARSER => 'Badger::Pod::Parser::Model',
        BLOCK_PARSER => 'Badger::Pod::Parser::Blocks',
    },
    exports    => {
        any    => 'Pod POD',    # we'll add to this below
    };

our @COMPONENTS = qw( document nodes parser block_parser model_parser views );
our $LOADED     = { };

*Pod = \&Document;

# Generate constructor subroutines, e.g. Nodes(), Parser(), Blocks(), etc.,
# that map onto methods, e.g. nodes(), parser(), blocks(), etc., and use
# autoloader methods, e.g. load_nodes(), load_parser(), load_blocks(), etc.
# The module names are defined in the constant subs above: NODES, PARSER, etc.

class->methods({
    map {                                   # e.g.
        my $name  = $_;                     # nodes
        my $Name  = ucfirst $_;             # Nodes
        my $NAME  = uc $_;                  # NODES
        my $load  = "load_$name";           # load_nodes
        my $pkg   = __PACKAGE__->$NAME;     # Badger::Pod::Nodes
        my $class = class($pkg);            # Badger::Class object for $PKG
        push(@$EXPORT_ANY, $Name, $NAME);   # NODES and Nodes() are exportable

        # e.g. Nodes()
        $Name => sub {
            $LOADED->{ $NAME } ||= $class->load->name;
            return @_ 
                ? POD->$name(@_)
                : $pkg;
        },

        # e.g. nodes()
        $name => sub {
            my $self = shift;
            ($LOADED->{ $NAME } || $self->$load)->new(@_);
        },
        
        # e.g. load_nodes()
        $load => sub {
            $LOADED->{ $NAME } = $class->load->name
        }
    }
    @COMPONENTS
});


1;

__END__

# Examples of the subs/methods generated by the above.

sub Nodes { 
    POD->load_nodes unless $LOADED->{ NODES };
    return @_ 
        ? POD->nodes(@_)
        : NODES
}

sub nodes {
    my $self = shift;
    ($LOADED->{ NODES } ||= $self->load_nodes)->new(@_);
}

sub load_nodes    { class(shift->NODES)->load->name    }
